(define (null? li)
  (if (string? li)
    (eqv? li "")
    (eqv? li nil)))

(define (flip f)
  (lambda (arg1 arg2)
    (f arg2 arg1)))

(define (foldl f acc li)
  (if (null? li)
    acc
    (foldl f (f acc (car li)) (cdr li))))

(define (foldr f end li)
  (if (null? li)
    end
    (f (car li) (foldr f end (cdr li)))))

(define fold foldl)
(define reduce fold)

(define (reverse li)
  (fold (flip cons) nil li))

(define (map f li)
  (foldr
    (lambda (x y) (cons (f x) y))
    '()
    li))

(define (filter pred li)
  (foldr
    (lambda (x y)
      (if (pred x)
        (cons x y)
        y))
    '()
    li))

(define (sum . li)
  (fold + 0 li))

(define (product . li)
  (fold * 1 li))

(define (any? pred . li)
  (apply (lambda li (fold or false li)) (map pred li)))

(define (every? pred . li)
  (apply (lambda li (fold and true li)) (map pred li)))

(define nil '())

(define (null? li)
  (if (string? li)
    (eqv? li "")
    (eqv? li '())))

(define (length li)
  (fold
    (lambda (a b)
      (+ 1 a))
    0
    li))

(define (concat l1 l2)
  (foldr
    (lambda (a b)
      (cons a b))
    l2
    l1))

(define (list=? s1 s2)
  (if (and (null? s1) (null? s2))
    true
    (if (/= (length s1) (length s2))
      false
      (if (eqv? (car s1) (car s2))
        (list=? (cdr s1) (cdr s2))
        false))))

(define (take n li)
  (if (or (null? li) (= n 0)))
    '()
    (cons (car li) (take (- n 1) (cdr li))))

(define (drop n li)
  (if (null? li)
    '()
    (if (= n 0)
      li
      (drop (- n 1) (cdr li)))))
